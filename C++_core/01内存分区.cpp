#include <iostream>
#include <string>
using namespace std;
/*
	内存分区模型：
	1、代码区：存放函数体的二进制代码，由操作系统进行管理
	2、全局区：存放全局变量，静态变量以及常量
	3、栈区：由编译器自动分配释放，存放函数的参数值，局部变量等
	4、堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收 

	四区的意义：不同区域存放的数据，赋予不同的生命周期，给予最大的灵活编程。

	程序经过编译后，生成了可执行的exe程序，还没有执行exe程序之前分为两个区域：

	代码区：
		1、存放CPU执行的机器指令；
		2、代码区是共享的，共享的目的是对于频繁被执行的程序，
		只需要在内存中有一份代码即可
		3、代码区是只读的，使其只读的原因是防止程序意外修改了它的指令

	全局区：
		1、全局变量和静态变量存放在此
		2、全局区还包含了常量区，字符串常量和其他常量(例：const修饰的变量)也存放在此
		3、该区域的数据在程序结束后由操作系统释放

	栈区：
		由编译器自动分配释放，存放函数的参数值，局部变量等
		注意：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放

	堆区：
		由程序员分配释放，若程序员不释放，程序结束时由操作系统回收
		在C++中主要利用new在堆区开辟内存

*/ 

/*
	栈区示例
*/

int* func() {
	int a = 200;
	return &a;
}

int* func2() {

	int* p = new int(10);

	
	
	return p;
}

int* func3() {
	//在堆区开辟一个数组
	int* arr = new int[10];
	for (int i = 0; i < 10; i++) {
		arr[i] = i;   //0~9
	}
	return arr;
}
int main1() {
	int* p = func();
	cout << *p << endl;//第一次打印出10
	cout << *p << endl;//第二次打印为乱码，因为p在栈区调用完就销毁了，不在调用了。本例编译器优化了，但是在低版本有可能会报错
	cout << p << endl;
	int* cc = func2();
	cout << cc << endl;
	cout << *cc << endl;
	delete cc;

	int* arr = func3();
	for (int i = 0; i < 10; i++) {
		cout << arr[i] << "\t";
	}
	//cout << *cc << endl;
	
	system("pause");
	return 0;
}